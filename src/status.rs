use crate::status::StatusCode::*;
use std::fmt::{Display, Formatter};

#[derive(Debug)]
pub enum StatusCode {
    Continue = 100,
    SwitchingProtocols = 101,
    Processing = 102,
    EarlyHints = 103,
    Ok = 200,
    Created = 201,
    Accepted = 202,
    NonAuthoritativeInformation = 203,
    NoContent = 204,
    ResetContent = 205,
    PartialContent = 206,
    MultiStatus = 207,
    AlreadyReported = 208,
    IMUsed = 226,
    MultipleChoices = 300,
    MovedPermanently = 301,
    Found = 302,
    SeeOther = 303,
    NotModified = 304,
    TemporaryRedirect = 307,
    PermanentRedirect = 308,
    BadRequest = 400,
    Unauthorized = 401,
    PaymentRequired = 402,
    Forbidden = 403,
    NotFound = 404,
    MethodNotAllowed = 405,
    NotAcceptable = 406,
    ProxyAuthenticationRequired = 407,
    RequestTimeout = 408,
    Conflict = 409,
    Gone = 410,
    LengthRequired = 411,
    PreconditionFailed = 412,
    ContentTooLarge = 413,
    URITooLong = 414,
    UnsupportedMediaType = 415,
    RangeNotSatisfiable = 416,
    ExpectationFailed = 417,
    ImATeapot = 418,
    MisdirectedRequest = 421,
    UnprocessableContent = 422,
    Locked = 423,
    FailedDependency = 424,
    TooEarly = 425,
    UpgradeRequired = 426,
    PreconditionRequired = 428,
    TooManyRequests = 429,
    RequestHeaderFieldsTooLarge = 431,
    UnavailableForLegalReasons = 451,
    InternalServerError = 500,
    NotImplemented = 501,
    BadGateway = 502,
    ServiceUnavailable = 503,
    GatewayTimeout = 504,
    HTTPVersionNotSupported = 505,
    VariantAlsoNegotiates = 506,
    InsufficientStorage = 507,
    LoopDetected = 508,
    NotExtended = 510,
    NetworkAuthenticationRequired = 511,
}

impl Default for StatusCode {
    fn default() -> Self {
        Self::Ok
    }
}

impl Display for StatusCode {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let s = match self {
            Continue => "100 Continue",
            SwitchingProtocols => "101 Switching Protocols",
            Processing => "102 Processing",
            EarlyHints => "103 EarlyHints",
            Ok => "200 OK",
            Created => "201 Created",
            Accepted => "202 Accepted",
            NonAuthoritativeInformation => "203 Non-Authoritative Information",
            NoContent => "204 No Content",
            ResetContent => "205 Reset Content",
            PartialContent => "206 Partial Content",
            MultiStatus => "207 Multi-Status",
            AlreadyReported => "208 Already Reported",
            IMUsed => "226 IM Used",
            MultipleChoices => "300 Multiple Choices",
            MovedPermanently => "301 Moved Permanently",
            Found => "302 Found",
            SeeOther => "303 See Other",
            NotModified => "304 Not Modified",
            TemporaryRedirect => "307 Temporary Redirect",
            PermanentRedirect => "308 Permanent Redirect",
            BadRequest => "400 Bad Request",
            Unauthorized => "401 Unauthorized",
            PaymentRequired => "402 Payment Required",
            Forbidden => "403 Forbidden",
            NotFound => "404 Not Found",
            MethodNotAllowed => "405 Method Not Allowed",
            NotAcceptable => "406 Not Acceptable",
            ProxyAuthenticationRequired => "407 Proxy Authentication Required",
            RequestTimeout => "408 Request Timeout",
            Conflict => "409 Conflict",
            Gone => "410 Gone",
            LengthRequired => "411 Length Required",
            PreconditionFailed => "412 Precondition Failed",
            ContentTooLarge => "413 Content Too Large",
            URITooLong => "414 URI Too Long",
            UnsupportedMediaType => "415 Unsupported Media Type",
            RangeNotSatisfiable => "416 Range Not Satisfiable",
            ExpectationFailed => "417 Expectation Failed",
            ImATeapot => "418 I'm a Teapot",
            MisdirectedRequest => "421 Misdirected Request",
            UnprocessableContent => "422 Unprocessable Content",
            Locked => "423 Locked",
            FailedDependency => "424 Failed Dependency",
            TooEarly => "425 Too Early",
            UpgradeRequired => "426 Upgrade Required",
            PreconditionRequired => "428 Precondition Required",
            TooManyRequests => "429 Too Many Requests",
            RequestHeaderFieldsTooLarge => "431 Request Header Fields Too Large",
            UnavailableForLegalReasons => "451 Unavailable For Legal Reasons",
            InternalServerError => "500 Internal Server Error",
            NotImplemented => "501 Not Implemented",
            BadGateway => "502 Bad Gateway",
            ServiceUnavailable => "503 Service Unavailable",
            GatewayTimeout => "504 Gateway Timeout",
            HTTPVersionNotSupported => "505 HTTP Version Not Supported",
            VariantAlsoNegotiates => "506 Variant Also Negotiates",
            InsufficientStorage => "507 Insufficient Storage",
            LoopDetected => "508 Loop Detected",
            NotExtended => "510 Not Extended",
            NetworkAuthenticationRequired => "511 Network Authentication Required",
        };

        write!(f, "{s}")
    }
}